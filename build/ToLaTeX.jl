export ToLatex
"""
ToLatex(c::QuantumCircuit, FName::String)

Will generate a file containing the Latex/quantikz code in the standalone documentclass.
# Arguments
- `circuit::QuantumCircuit`: a QuantumCircuit as defined by Snowflake
- `FName::String`: the name of the file to create. Warning! It will overwrite if already existing. 
# Example
```julia-repl
julia> ToLatex(circuit, "Foo.bar")

```
This is the standard output of a Snowflake circuit:

![Snowflake output](images/Default Snowflake Circuit.PNG)

This is the output file generated by ToLatex(). It can be copy&paste to any other Latex document.
```
\\documentclass{standalone}
\\usepackage{tikz}
\\usetikzlibrary{quantikz}
\\begin{document}


\\begin{quantikz}
\\lstick{q[1]: } &  \\gate{H} &  \\ctrl{1} &  \\gate{X} &  \\ctrl{1} &  \\qw &  \\qw &  \\qw &  \\ctrl{2} &  \\gate{Z} &  \\qw \\\\
\\lstick{q[2]: } &  \\qw &  \\gate{X} &  \\qw &  \\gate{Z} &  \\qw &  \\qw &  \\ctrl{2} & \\qw &\\qw & \\qw \\\\
\\lstick{q[3]: } &  \\qw &  \\qw &  \\qw &  \\qw &  \\gate{H} &  \\qw & \\qw & \\gate{Z} & \\qw & \\qw \\\\
\\lstick{q[4]: } &  \\qw &  \\qw &  \\qw &  \\qw &  \\qw &  \\gate{H} &  \\gate{Z} &  \\qw &  \\ctrl{-3} &  \\qw 
\\end{quantikz}
\\end{document}
```

This is the result of a pdfLaTeX compilation.

![ToLatex output](images/Latex Snowflake Circuit.PNG)
"""
function ToLatex(c::QuantumCircuit, FName = "")
    #Originalstdout = stdout # we are going to capture the print of the circuit in a pipe , then read the pipe, process and write to a file
    #(rd, wr) = redirect_stdout()
    #print(c)
    #redirect_stdout(Originalstdout)

    if FName != ""
        f = open(FName, "w+")
        write(f, "\\documentclass{standalone}\n")
        write(f, "\\usepackage{tikz}\n")
        write(f, "\\usetikzlibrary{quantikz}\n")
        write(f, "\\begin{document}\n")
        write(f, "\n\n")
    else
        f = stdout
    end
    write(f, "\\begin{quantikz}\n")

    #linein = readline(rd)
    #linein = readline(rd)
    #linein = readline(rd)

#=     linein = readline(rd)
    nbofline = (2*c.qubit_count) - 1
    StrCircuitin = String[]
    StrCircuitout = String[]
    start = 0
    for qubit âˆˆ 1:nbofline
        linein = readline(rd)
        push!(StrCircuitin, linein)
        if c.qubit_count < 10 
            push!(StrCircuitout, linein[1:5])
            start = 6
        else 
            push!(StrCircuitout, linein[1:6])
            start = 7
        end
    end

    NbOfcolumns = 0
    for ch in StrCircuitin[1] 
        NbOfcolumns = NbOfcolumns + 1 
    end

    NbofSteps = Int64((NbOfcolumns + 1 - start)/5)

    LogicCircuit = String[]
    for i in 1:c.qubit_count
        lineout =""
        j = 1
        for ch in StrCircuitin[(2*i)-1]
            if (j >= (start+2)) && (mod(j-start-2,5) == 0)
                lineout = lineout * ch #StrCircuitin[(2*i)-1][start+2+((j-1)*5)]
            end
            j = j + 1
        end
        push!(LogicCircuit, lineout)
    end

    Direction = zeros(Int64, c.qubit_count, NbofSteps)
    stop = Int64(0)
    test = Int64(0)
    for i in 1:c.qubit_count
        lineout = ""
        for j in 1:NbofSteps
            ch = LogicCircuit[i][j]
            if ch == '*'
                if i == 1 # it can only go down
                    for k in 2:c.qubit_count
                        if LogicCircuit[k][j] != '|'
                            stop = k
                            break
                        end
                    end
                    Direction[i,j] = stop-1
                end
                if i == c.qubit_count # it can only go up
                    for k in c.qubit_count-1:-1:1
                        if LogicCircuit[k][j] != '|'
                            stop = k
                            break
                        end
                    end
                    Direction[i,j] = stop - c.qubit_count
                end
                if ((i != 1) && (i!= c.qubit_count))
                    # Here we need to check if it is going up or down.

                    if LogicCircuit[i-1][j] == '|' # So it is going up
                        for k in i-1:-1:1
                            if LogicCircuit[k][j] != '|'
                                stop = k
                                break
                            end
                        end
                        Direction[i,j] = stop - i
                    else                           # So it is going up
                        for k in i+1:c.qubit_count
                            if LogicCircuit[k][j] != '|'
                                stop = k
                                break
                            end
                        end
                        Direction[i,j] = stop - i
                    end
                end
            end
        end
    end =#

    if c.qubit_count == 0 return end

    LatexCircuit = Matrix{String}(undef, c.qubit_count, length(c.pipeline)+2)
    for i in 1:c.qubit_count
        LatexCircuit[i,1] = "\\lstick{q[$i]: } & "
    end
    j = 2
    for Vgates in c.pipeline
        for gate in Vgates
            if length(gate.target) == 1
                #println("Un seul qubit")
                qubit1 = gate.target[1]
                symbole1 = gate.display_symbol[1]
                #println("qubit1 $qubit1, symbol1 = $symbole1")
                LatexCircuit[qubit1,j] = string("\\gate{", symbole1, "} & ")
                for i in 1:c.qubit_count
                    if i != qubit1
                        LatexCircuit[i,j] = "\\qw"
                    end
                end
            else
                #println("Deux qubit")
                qubit1 = gate.target[1]
                symbole1 = gate.display_symbol[1]
                qubit2 = gate.target[2]
                symbole2 = gate.display_symbol[2]
                #println("qubit1 $qubit1, symbol1 = $symbole1, qubit2 $qubit2, symbol2 = $symbole2")
                if symbole1 == "*"
                    diff = qubit2 - qubit1
                    LatexCircuit[qubit1,j] = string("\\ctrl{", diff, "} & ")
                else
                    LatexCircuit[qubit1,j] = string("\\gate{", symbole1, "} & ")
                end
                if symbole2 == "*"
                    diff = qubit1 - qubit2
                    LatexCircuit[qubit2,j] = string("\\ctrl{", diff, "} & ")
                else
                    LatexCircuit[qubit2,j] = string("\\gate{", symbole2, "} & ")
                end
                for i in 1:c.qubit_count
                    if ((i != qubit1) && (i!= qubit2))
                        LatexCircuit[i,j] = "\\qw & "
                    end
                end
            end
            j = j + 1
        end
    end
    for i in 1:c.qubit_count-1
        LatexCircuit[i,j] = "\\qw \\\\ "
    end
    LatexCircuit[c.qubit_count,j] = "\\qw"

    for i in 1:c.qubit_count
        for j in 1:length(c.pipeline)+2
            print(LatexCircuit[i,j])
        end
        print('\n')
    end

    #=LatexCircuit = String[]
    lineout = ""
    for i in 1:c.qubit_count
        lineout = "\\lstick{q[$i]: } & "
        for j in 1:NbofSteps
            ch = LogicCircuit[i][j]
            Where = Direction[i,j]
            @match ch begin
                'H' => (lineout = lineout * " \\gate{H} & ")
                'Z' => (lineout = lineout * " \\gate{Z} & ")
                'X' => (lineout = lineout * " \\gate{X} & ")
                '*' => (lineout = lineout * " \\ctrl{$Where} & ")
                '|' => (lineout = lineout * "\\qw &")
                '-' => (lineout = lineout * " \\qw & ")
                _  => (lineout = lineout * " ")
            end
        end
        lineout = lineout * " \\qw "
        if i < c.qubit_count 
            lineout = lineout * "\\\\"
        end
        push!(LatexCircuit, lineout)
    end

    for i in 1:c.qubit_count
        write(f, LatexCircuit[i])
        write(f,'\n')
        end

    write(f, "\\end{quantikz}\n")
    write(f, "\\end{document}\n")

    if FName != ""
        close(f)
        run(Cmd(`pdflatex $FName`))
    end =#
end