export ToLaTeX
"""
ToLaTeX(c::QuantumCircuit, FName::String)::Bool

Will generate a file containing the \\LaTeX/quantikz code in the standalone documentclass.
# Arguments
- `circuit::QuantumCircuit`: a QuantumCircuit as defined by Snowflake
- `FName::String`: the name of the file to create. Warning! It will overwrite if already existing. 
# Example
```julia-repl
julia> ToLaTeX(circuit, "Foo.bar")

```

This is an example of the output file generated by ToLaTeX(). It can be copy&paste to any other Latex document.
```
\\documentclass{standalone}
\\usepackage{tikz}
\\usetikzlibrary{quantikz}
\\begin{document}

\\begin{quantikz}
\\lstick{q[1]: } &  \\gate{H} &  \\ctrl{1} &  \\gate{X} &  \\ctrl{1} &  \\qw &  \\qw &  \\qw &  \\ctrl{2} &  \\gate{Z} &  \\qw \\\\
\\lstick{q[2]: } &  \\qw &  \\gate{X} &  \\qw &  \\gate{Z} &  \\qw &  \\qw &  \\ctrl{2} & \\qw &\\qw & \\qw \\\\
\\lstick{q[3]: } &  \\qw &  \\qw &  \\qw &  \\qw &  \\gate{H} &  \\qw & \\qw & \\gate{Z} & \\qw & \\qw \\\\
\\lstick{q[4]: } &  \\qw &  \\qw &  \\qw &  \\qw &  \\qw &  \\gate{H} &  \\gate{Z} &  \\qw &  \\ctrl{-3} &  \\qw 
\\end{quantikz}
\\end{document}
```

ToLaTeX(mqc::MQC, FName::String)::Bool

Will generate the \\LaTeX/quantikz code representing the circuits and the connectors composing the Meta circuit. 
"""
function ToLaTeX(c::QuantumCircuit, FName = "")::Bool
    if c.qubit_count == 0 
        println("There are no qubits in the circuit")
        return false
    end

    if FName != ""
        f = open(FName, "w+")
        println(f, "\\documentclass{standalone}")
        println(f, "\\usepackage{tikz}")
        println(f, "\\usetikzlibrary{quantikz}")
        println(f, "\\begin{document}\n")
    else
        f = stdout
    end
    println(f, "\\begin{quantikz}")

    LatexCircuit = Matrix{String}(undef, c.qubit_count, length(c.pipeline)+2)
    for i in 1:c.qubit_count
        LatexCircuit[i,1] = "\\lstick{q[$i]: } & "
    end
  
    j = 2
    for Vgates in c.pipeline
        for gate in Vgates
            if length(gate.target) == 1
                qubit1 = gate.target[1]
                symbole1 = gate.display_symbol[1]
                LatexCircuit[qubit1,j] = string("\\gate{", symbole1, "} & ")
                for i in 1:c.qubit_count
                    if i != qubit1
                        LatexCircuit[i,j] = "\\qw & "
                    end
                end
            else
                qubit1 = gate.target[1]
                symbole1 = gate.display_symbol[1]
                qubit2 = gate.target[2]
                symbole2 = gate.display_symbol[2]

                if symbole1 == "*"
                    diff = qubit2 - qubit1
                    LatexCircuit[qubit1,j] = string("\\ctrl{", diff, "} & ")
                else
                    LatexCircuit[qubit1,j] = string("\\gate{", symbole1, "} & ")
                end

                if symbole2 == "*"
                    diff = qubit1 - qubit2
                    LatexCircuit[qubit2,j] = string("\\ctrl{", diff, "} & ")
                else
                    LatexCircuit[qubit2,j] = string("\\gate{", symbole2, "} & ")
                end

                for i in 1:c.qubit_count
                    if ((i != qubit1) && (i!= qubit2))
                        LatexCircuit[i,j] = "\\qw & "
                    end
                end

            end
            j = j + 1
        end
    end

    for i in 1:c.qubit_count-1
        LatexCircuit[i,j] = "\\qw \\\\ "
    end
    LatexCircuit[c.qubit_count,j] = "\\qw"

    for i in 1:c.qubit_count
        for j in 1:length(c.pipeline)+2
            print(f, LatexCircuit[i,j])
        end
        print(f, '\n')
    end

    println(f, "\\end{quantikz}")
    
    if FName != ""
        println(f, "\\end{document}\n")
    end

    if FName != ""
        close(f)
    end

    return true
end

function ToLaTeX(mqc::MQC, FName = "")::Bool
    position!(mqc)

    if lastindex(mqc.circuit_list) == 0 
        println("There are no circuits in the Meta circuit")
        return false
    end

    if FName != ""
        f = open(FName, "w+")
        println(f, "\\documentclass{standalone}")
        println(f, "\\usepackage{tikz}")
        println(f, "\\usetikzlibrary{quantikz}")
        println(f, "\\begin{document}\n")
    else
        f = stdout
    end
    
    println(f, "\\begin{quantikz}[transparent, column sep=1cm, row sep={1cm,between origins}]")
    for i in 1:length(mqc.circuit_list) print(f, "& ") end
    print(f, "& & \\\\ \n")

    go_up = (length(mqc.wire_list)+2) / 2
    print(f, "& & ")
    for i in 1:length(mqc.circuit_list) 
        print(f, "\\gate[wires=", length(mqc.wire_list)+2, ", label style={yshift=", go_up, "cm}]{\\mbox{Circuit ", i,
        "}} & ")
    end
    print(f, "& \\\\ \n")

    for wire in mqc.wire_list
        if wire.order == 1
            print(f, "\\lstick[wires=", length(mqc.wire_list), "]{\\ket{\\Phi}} \n")
        end
        print(f, "& \\lstick{ wire ", wire.order, "} & ")

        i = Int(0)
        for circuit in mqc.circuit_list
            i = i + 1
            over = true
            qb = 0
            for connec in wire.connector_list
                if connec.plugin.circuit.id == circuit.id
                    over = false
                    qb = connec.plugin.qubit
                end
            end
            if over == false
                print(f, "\\gateinput{qb=", qb, "} & ")
            else
                print(f, "\\linethrough & ")
            end
        end
        if wire.order == 1
            print(f, "\\qw \\rstick[wires=", length(mqc.wire_list), "]{\\ket{\\Psi}} \\\\ \n")
        else
            print(f, "\\qw \\\\ \n")
        end
    end

    for i in 1:length(mqc.circuit_list) print(f, "& ") end
    print(f, "& & \n")

    println(f, "\\end{quantikz}")
    
    if FName != ""
        println(f, "\\end{document}\n")
    end

    if FName != ""
        close(f)
    end

    return true
end
