export ToLaTeX
"""
ToLaTeX(c::QuantumCircuit, FName::String)

Will generate a file containing the Latex/quantikz code in the standalone documentclass.
# Arguments
- `circuit::QuantumCircuit`: a QuantumCircuit as defined by Snowflake
- `FName::String`: the name of the file to create. Warning! It will overwrite if already existing. 
# Example
```julia-repl
julia> ToLaTeX(circuit, "Foo.bar")

```
This is the standard output of a Snowflake circuit:

![Snowflake output](/Denys/Shovel/docs/build/assets/Snowflake_Circuit.PNG)

This is the output file generated by ToLaTeX(). It can be copy&paste to any other Latex document.
```
\\documentclass{standalone}
\\usepackage{tikz}
\\usetikzlibrary{quantikz}
\\begin{document}


\\begin{quantikz}
\\lstick{q[1]: } &  \\gate{H} &  \\ctrl{1} &  \\gate{X} &  \\ctrl{1} &  \\qw &  \\qw &  \\qw &  \\ctrl{2} &  \\gate{Z} &  \\qw \\\\
\\lstick{q[2]: } &  \\qw &  \\gate{X} &  \\qw &  \\gate{Z} &  \\qw &  \\qw &  \\ctrl{2} & \\qw &\\qw & \\qw \\\\
\\lstick{q[3]: } &  \\qw &  \\qw &  \\qw &  \\qw &  \\gate{H} &  \\qw & \\qw & \\gate{Z} & \\qw & \\qw \\\\
\\lstick{q[4]: } &  \\qw &  \\qw &  \\qw &  \\qw &  \\qw &  \\gate{H} &  \\gate{Z} &  \\qw &  \\ctrl{-3} &  \\qw 
\\end{quantikz}
\\end{document}
```

This is the result of a pdfLaTeX compilation.

![ToLaTeX output](/Denys/Shovel/docs/build/assets/Latex_Circuit.PNG)
"""
function ToLaTeX(c::QuantumCircuit, FName = "")::Boolean
    #Originalstdout = stdout # we are going to capture the print of the circuit in a pipe , then read the pipe, process and write to a file
    #(rd, wr) = redirect_stdout()
    #print(c)
    #redirect_stdout(Originalstdout)
    if c.qubit_count == 0 
        error("There are no qubits in the circuit")
        return false
    end

    if FName != ""
        f = open(FName, "w+")
        write(f, "\\documentclass{standalone}\n")
        write(f, "\\usepackage{tikz}\n")
        write(f, "\\usetikzlibrary{quantikz}\n")
        write(f, "\\begin{document}\n")
        write(f, "\n\n")
    else
        f = stdout
    end
    write(f, "\\begin{quantikz}\n")



    LatexCircuit = Matrix{String}(undef, c.qubit_count, length(c.pipeline)+2)
    for i in 1:c.qubit_count
        LatexCircuit[i,1] = "\\lstick{q[$i]: } & "
    end
    j = 2
    for Vgates in c.pipeline
        for gate in Vgates
            if length(gate.target) == 1
                #println("Un seul qubit")
                qubit1 = gate.target[1]
                symbole1 = gate.display_symbol[1]
                #println("qubit1 $qubit1, symbol1 = $symbole1")
                LatexCircuit[qubit1,j] = string("\\gate{", symbole1, "} & ")
                for i in 1:c.qubit_count
                    if i != qubit1
                        LatexCircuit[i,j] = "\\qw & "
                    end
                end
            else
                #println("Deux qubit")
                qubit1 = gate.target[1]
                symbole1 = gate.display_symbol[1]
                qubit2 = gate.target[2]
                symbole2 = gate.display_symbol[2]
                #println("qubit1 $qubit1, symbol1 = $symbole1, qubit2 $qubit2, symbol2 = $symbole2")
                if symbole1 == "*"
                    diff = qubit2 - qubit1
                    LatexCircuit[qubit1,j] = string("\\ctrl{", diff, "} & ")
                else
                    LatexCircuit[qubit1,j] = string("\\gate{", symbole1, "} & ")
                end
                if symbole2 == "*"
                    diff = qubit1 - qubit2
                    LatexCircuit[qubit2,j] = string("\\ctrl{", diff, "} & ")
                else
                    LatexCircuit[qubit2,j] = string("\\gate{", symbole2, "} & ")
                end
                for i in 1:c.qubit_count
                    if ((i != qubit1) && (i!= qubit2))
                        LatexCircuit[i,j] = "\\qw & "
                    end
                end
            end
            j = j + 1
        end
    end
    for i in 1:c.qubit_count-1
        LatexCircuit[i,j] = "\\qw \\\\ "
    end
    LatexCircuit[c.qubit_count,j] = "\\qw"

    for i in 1:c.qubit_count
        for j in 1:length(c.pipeline)+2
            print(LatexCircuit[i,j])
        end
        print('\n')
    end

    write(f, "\\end{quantikz}\n")
    
    if FName != ""
        write(f, "\\end{document}\n")
    end

    if FName != ""
        close(f)
    end

    return true
end